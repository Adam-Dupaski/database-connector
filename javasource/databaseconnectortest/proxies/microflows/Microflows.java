// This file was generated by Mendix Modeler 6.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package databaseconnectortest.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the DatabaseConnectorTest module
	public static void assertEqualsListEntityValues(IContext context, String _message, java.util.List<databaseconnectortest.proxies.TestResultRow> _expected, java.util.List<databaseconnector.proxies.Row> _actual)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("Message", _message);
			java.util.ArrayList<IMendixObject> listparam_expected = null;
			if (_expected != null)
			{
				listparam_expected = new java.util.ArrayList<IMendixObject>();
				for (databaseconnectortest.proxies.TestResultRow obj : _expected)
					listparam_expected.add(obj.getMendixObject());
			}
			params.put("Expected", listparam_expected);
			java.util.ArrayList<IMendixObject> listparam_actual = null;
			if (_actual != null)
			{
				listparam_actual = new java.util.ArrayList<IMendixObject>();
				for (databaseconnector.proxies.Row obj : _actual)
					listparam_actual.add(obj.getMendixObject());
			}
			params.put("Actual", listparam_actual);
			Core.execute(context, "DatabaseConnectorTest.AssertEqualsListEntityValues", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void createPostgreSQLDatabase(IContext context, String _masterJdbcUrl, String _databaseName)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("masterJdbcUrl", _masterJdbcUrl);
			params.put("databaseName", _databaseName);
			Core.execute(context, "DatabaseConnectorTest.CreatePostgreSQLDatabase", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void dropPostgreSQLDatabase(IContext context, String _masterJdbcUrl, String _databaseName, boolean _force)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("masterJdbcUrl", _masterJdbcUrl);
			params.put("databaseName", _databaseName);
			params.put("force", _force);
			Core.execute(context, "DatabaseConnectorTest.DropPostgreSQLDatabase", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void prepareRedshiftCluster(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "DatabaseConnectorTest.PrepareRedshiftCluster", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean prepareTestEnvironment(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "DatabaseConnectorTest.PrepareTestEnvironment", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void shutdownRedshiftCluster(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "DatabaseConnectorTest.ShutdownRedshiftCluster", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean testExecuteQueryPostgreSQL(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "DatabaseConnectorTest.TestExecuteQueryPostgreSQL", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void testExecuteStatementPostgreSQL(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "DatabaseConnectorTest.TestExecuteStatementPostgreSQL", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void testExecuteStoredProcedurePostgreSQL(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			Core.execute(context, "DatabaseConnectorTest.TestExecuteStoredProcedurePostgreSQL", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean testRDSPostgreSQL(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "DatabaseConnectorTest.TestRDSPostgreSQL", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean testRedshift(IContext context)
	{
		try
		{
			Map<String, Object> params = new HashMap<String, Object>();
			return (Boolean)Core.execute(context, "DatabaseConnectorTest.TestRedshift", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}